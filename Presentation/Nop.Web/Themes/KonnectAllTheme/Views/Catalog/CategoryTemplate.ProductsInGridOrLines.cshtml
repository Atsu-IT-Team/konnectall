@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";
    //title
    NopHtml.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    NopHtml.AddMetaDescriptionParts(Model.MetaDescription);
    NopHtml.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    NopHtml.AppendPageCssClassParts("html-category-page");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        NopHtml.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }
}


@section CategoryDetailsAfterBreadcrumb {

    <div class="slider" style="position: relative;background:url('@Model.PictureBannerModel.FullSizeImageUrl')no-repeat center center;height: 300px;background-size: cover;background-position: bottom;">
        @* @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model }) *@
        @*<img alt="@Model.PictureModel.AlternateText" src="@Model.PictureModel.FullSizeImageUrl" title="@Model.PictureModel.Title" />*@
    </div>
}

@section TopBanner {
    <div class="banner-top" style="position: relative">
        @* <img alt="" src="./assets/img/category/banner-middle.png">*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    </div>
}

@section CatalogFilters {
    @*@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })*@
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
    @*@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })*@
    @* @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId }) *@

}


@section Breadcrumb {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="breadcrumbs">
            <div class="container">
                <ul class="items">
                    @{
                        int position = 1;
                    }
                    <li class="item 0">
                        <a href="@Url.RouteUrl("Homepage")" title="@T("Categories.Breadcrumb.Top")" title="Go to the home page" class="text-capitalize">@T("Categories.Breadcrumb.Top")</a>
                    </li>

                    @foreach (var cat in Model.CategoryBreadcrumb)
                    {
                        <li class="item 1">
                            @{
                                var isLastCategory = cat.Id == Model.Id;
                            }
                            @if (isLastCategory)
                            {
                                <i class="fas fa-solid fa-chevron-right"></i>
                                @cat.Name
                            }
                            else
                            {
                                <i class="fas fa-solid fa-chevron-right"></i>
                                <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>

                            }
                        </li>
                        position++;
                    }
                </ul>
            </div>
        </div>
    }
}


<div class="row">

    <div class="banner">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
    </div>
    
    @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
    <div class="row">
        @{
            var catalogProductsViewData1 = new ViewDataDictionary(ViewData);
            catalogProductsViewData1["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData1)

        <div class="banner-middle">
            <img alt="" src="./assets/img/category/banner-categ2.png" class="categ-img">
        </div>
    </div>


</div>










