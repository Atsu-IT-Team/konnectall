@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings

<div class="order-summary-content">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore, additionalData = Model })
    @await Html.PartialAsync("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }

        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">

            <div class="col-md-12 right-content cart-new">
                <div class="order_review">
                    <div>
                        <h4 class="text-left">@T("ShoppingCart")</h4>
                    </div>
                    <div class="table-responsive order_table text-center">
                        <table class="table">
                            <thead>
                                <tr>
                                    @if (Model.IsEditable)
                                    {
                                        <th></th>
                                    }
                                    <th></th>
                                    @if (Model.ShowSku)
                                    {
                                        <th></th>
                                    }
                                    <th>@T("ShoppingCart.Product(s)")</th>
                                    <th>@T("ShoppingCart.UnitPrice")</th>
                                    @if (Model.IsEditable)
                                    {
                                        <th>@T("ShoppingCart.Quantity")</th>
                                    }
                                    <th class="total">@T("ShoppingCart.ItemTotal")</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Items)
                                {
                                    <tr>
                                        @if (Model.IsEditable)
                                        {
                                            <td class="remove-from-cart">
                                                @if (item.DisableRemoval)
                                                {
                                                    <text>&nbsp;</text>
                                                }
                                                else
                                                {
                                                    <input type="checkbox" name="removefromcart" id="removefromcart@(item.Id)" value="@(item.Id)" aria-label="@T("ShoppingCart.Remove")" />
                                                    <button type="button" name="updatecart" class="remove-btn" onclick="$('#removefromcart@(item.Id)').attr('checked', true); $('#updatecart').click();"></button>
                                                }
                                            </td>
                                        }
                                        <td class="image product-thumbnail">
                                            <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" class="img-thumbnail">
                                        </td>
                                        @if (Model.ShowSku)
                                        {
                                            <td class="sku">
                                                <span class="sku-number">@item.Sku</span>
                                            </td>
                                        }

                                        <td class="prd-name">
                                            <h5>
                                                <a href="@Url.RouteUrl("Product", new {SeName = item.ProductSeName})">@item.ProductName</a>
                                            </h5>
                                            <span class="product-qty">x @item.Quantity</span>
                                        </td>
                                        <td>@item.UnitPrice</td>
                                        <td class="quantity">
                                            @if (Model.IsEditable)
                                            {
                                                if (item.AllowedQuantities.Count > 0)
                                                {
                                                    <select name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" class="qty-dropdown">
                                                        @foreach (var qty in item.AllowedQuantities)
                                                        {
                                                            <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                        }
                                                    </select>
                                                }
                                                else
                                                {
                                                    <input name="itemquantity@(item.Id)" id="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" style="width: 50px; text-align: center;" aria-label="@T("ShoppingCart.Quantity")" />
                                                }
                                            }
                                            else
                                            {
                                                <span class="product-quantity">@item.Quantity</span>
                                            }
                                        </td>


                                        <td>@item.SubTotal</td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                    <div class="bt-1 border-color-1"></div>

                </div>
            </div>
            <div class="clr"></div>
            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        <div>
                            <button type="submit" name="updatecart" id="updatecart" class="btn btn-primary">@T("ShoppingCart.UpdateCart")</button>
                            <button type="submit" name="continueshopping" class="btn btn-primary">@T("ShoppingCart.ContinueShopping")</button>
                        </div>
                        @await Component.InvokeAsync("ShoppingCartEstimateShipping")
                    </div>
                }

            </div>


            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter, additionalData = Model })
                <div class="row">                   
                    <div class="col-md-6">
                        @if (Model.IsEditable)
                        {
                            @await Html.PartialAsync("_CheckoutAttributes", Model)
                        }
                        @await Component.InvokeAsync("SelectedCheckoutAttributes")

                        @if (Model.IsEditable)
                        {
                            <div class="cart-collaterals">
                                <div class="deals">
                                    @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                    @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals, additionalData = Model })
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-md-6">
                        <div class="totals">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals, additionalData = Model })
                            @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                            <div class="total-bottom">
                                @if (Model.IsEditable)
                                {
                                    if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                                    {
                                        <div class="min-amount-warning">
                                            @Model.MinOrderSubtotalWarning
                                        </div>
                                    }
                                }
                                @if (Model.IsEditable)
                                {
                                    if (Model.TermsOfServiceOnShoppingCartPage)
                                    {
                                        <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                            <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                                        </div>
                                        <div class="terms-of-service" style="margin: 0 0 20px;">
                                            <input id="termsofservice" type="checkbox" name="termsofservice" />
                                            <label for="termsofservice" style="display: contents;">@T("Checkout.TermsOfService.IAccept")</label>
                                            @if (Model.TermsOfServicePopup)
                                            {
                                                <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                                <script asp-location="Footer">
                                                    $(document).ready(function () {
                                                        $('#read-terms').on('click',
                                                            function (e) {
                                                                e.preventDefault();
                                                                displayPopupContentFromUrl(
                                                                    '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
                                                                    '@T("Checkout.TermsOfService")');
                                                            });
                                                    });
                                                </script>
                                            }
                                            else
                                            {
                                                <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                            }
                                        </div>
                                    }
                                    <div class="checkout-buttons">
                                        @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                        {
                                            <script asp-location="Footer">
                                                $(document).ready(function () {
                                                    $('#checkout').on('click', function () {
                                                        //terms of service
                                                        var termOfServiceOk = true;
                                                        if ($('#termsofservice').length > 0) {
                                                            //terms of service element exists
                                                            if (!$('#termsofservice').is(':checked')) {
                                                                $("#terms-of-service-warning-box").dialog();
                                                                termOfServiceOk = false;
                                                            } else {
                                                                termOfServiceOk = true;
                                                            }
                                                        }
                                                        return termOfServiceOk;
                                                    });
                                                });
                                            </script>
                                            if (orderSettings.CheckoutDisabled)
                                            {
                                                <div class="checkout-disabled">
                                                    @T("Checkout.Disabled")
                                                </div>
                                            }
                                            else
                                            {
                                                <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                                    @T("Checkout.Button")
                                                </button>
                                            }
                                        }
                                    </div>
                                    <div class="addon-buttons">
                                        @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
                                        @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
                                        {
                                            @await Component.InvokeAsync(pm)
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter, additionalData = Model })
</div>